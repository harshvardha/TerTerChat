// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
insert into users(id, email, username, password, created_at, updated_at)
values(
    gen_random_uuid(), $1, $2, $3, NOW(), NOW()
)
returning id, email, username, created_at, updated_at
`

type CreateUserParams struct {
	Email    string
	Username string
	Password string
}

type CreateUserRow struct {
	ID        uuid.UUID
	Email     string
	Username  string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.Username, arg.Password)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, username, password from users where email = $1
`

type GetUserByEmailRow struct {
	ID       uuid.UUID
	Username string
	Password string
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(&i.ID, &i.Username, &i.Password)
	return i, err
}

const getUserById = `-- name: GetUserById :one
select email, username, created_at, updated_at from users where id = $1
`

type GetUserByIdRow struct {
	Email     string
	Username  string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (GetUserByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.Email,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const removeUser = `-- name: RemoveUser :exec
delete from users where id = $1
`

func (q *Queries) RemoveUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeUser, id)
	return err
}

const updateEmail = `-- name: UpdateEmail :exec
update users set email = $1 where id = $2
`

type UpdateEmailParams struct {
	Email string
	ID    uuid.UUID
}

func (q *Queries) UpdateEmail(ctx context.Context, arg UpdateEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateEmail, arg.Email, arg.ID)
	return err
}

const updatePassword = `-- name: UpdatePassword :exec
update users set password = $1 where id = $2
`

type UpdatePasswordParams struct {
	Password string
	ID       uuid.UUID
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.Password, arg.ID)
	return err
}

const updateUsername = `-- name: UpdateUsername :one
update users set username = $1 where id = $2
returning username, updated_at
`

type UpdateUsernameParams struct {
	Username string
	ID       uuid.UUID
}

type UpdateUsernameRow struct {
	Username  string
	UpdatedAt time.Time
}

func (q *Queries) UpdateUsername(ctx context.Context, arg UpdateUsernameParams) (UpdateUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, updateUsername, arg.Username, arg.ID)
	var i UpdateUsernameRow
	err := row.Scan(&i.Username, &i.UpdatedAt)
	return i, err
}
