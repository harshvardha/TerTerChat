// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: messages.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addReceiverToGroupMessage = `-- name: AddReceiverToGroupMessage :exec
insert into group_message_receivers(
    message_id, member_id, group_id
) values(
    $1, $2, $3
)
`

type AddReceiverToGroupMessageParams struct {
	MessageID uuid.UUID
	MemberID  uuid.UUID
	GroupID   uuid.UUID
}

func (q *Queries) AddReceiverToGroupMessage(ctx context.Context, arg AddReceiverToGroupMessageParams) error {
	_, err := q.db.ExecContext(ctx, addReceiverToGroupMessage, arg.MessageID, arg.MemberID, arg.GroupID)
	return err
}

const countOfGroupMembersWhoReadMessage = `-- name: CountOfGroupMembersWhoReadMessage :one
select count(*) from group_message_read where message_id = $1 and group_member_id = $2 and group_id = $3
`

type CountOfGroupMembersWhoReadMessageParams struct {
	MessageID     uuid.UUID
	GroupMemberID uuid.UUID
	GroupID       uuid.UUID
}

func (q *Queries) CountOfGroupMembersWhoReadMessage(ctx context.Context, arg CountOfGroupMembersWhoReadMessageParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countOfGroupMembersWhoReadMessage, arg.MessageID, arg.GroupMemberID, arg.GroupID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countOfGroupMembersWhoReceivedMessage = `-- name: CountOfGroupMembersWhoReceivedMessage :one
select count(*) from group_message_received where message_id = $1 and group_member_id = $2 and group_id = $3
`

type CountOfGroupMembersWhoReceivedMessageParams struct {
	MessageID     uuid.UUID
	GroupMemberID uuid.UUID
	GroupID       uuid.UUID
}

func (q *Queries) CountOfGroupMembersWhoReceivedMessage(ctx context.Context, arg CountOfGroupMembersWhoReceivedMessageParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countOfGroupMembersWhoReceivedMessage, arg.MessageID, arg.GroupMemberID, arg.GroupID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createMessage = `-- name: CreateMessage :one
insert into messages(
    id, description, sender_id, reciever_id,
    group_id, sent, created_at, updated_at
)
values(
    gen_random_uuid(),
    $1, $2, $3, $4, $5, NOW(), NOW()
)
returning id, description, sender_id, reciever_id, group_id, sent, recieved, created_at, updated_at, read, is_sender_allowed_to_see, is_receiver_allowed_to_see
`

type CreateMessageParams struct {
	Description string
	SenderID    uuid.UUID
	RecieverID  uuid.NullUUID
	GroupID     uuid.NullUUID
	Sent        bool
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage,
		arg.Description,
		arg.SenderID,
		arg.RecieverID,
		arg.GroupID,
		arg.Sent,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.SenderID,
		&i.RecieverID,
		&i.GroupID,
		&i.Sent,
		&i.Recieved,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Read,
		&i.IsSenderAllowedToSee,
		&i.IsReceiverAllowedToSee,
	)
	return i, err
}

const getAllGroupConversations = `-- name: GetAllGroupConversations :many
select distinct messages.group_id as group_id, groups.name as group_name from messages join groups on messages.group_id = groups.id where messages.sender_id = $1
`

type GetAllGroupConversationsRow struct {
	GroupID   uuid.NullUUID
	GroupName string
}

func (q *Queries) GetAllGroupConversations(ctx context.Context, senderID uuid.UUID) ([]GetAllGroupConversationsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllGroupConversations, senderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllGroupConversationsRow
	for rows.Next() {
		var i GetAllGroupConversationsRow
		if err := rows.Scan(&i.GroupID, &i.GroupName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllGroupMessages = `-- name: GetAllGroupMessages :many
select id, description, sender_id, reciever_id, group_id, sent, recieved, created_at, updated_at, read, is_sender_allowed_to_see, is_receiver_allowed_to_see from messages where group_id = $1 and created_at < $2 order by created_at limit 10
`

type GetAllGroupMessagesParams struct {
	GroupID   uuid.NullUUID
	CreatedAt time.Time
}

func (q *Queries) GetAllGroupMessages(ctx context.Context, arg GetAllGroupMessagesParams) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getAllGroupMessages, arg.GroupID, arg.CreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.SenderID,
			&i.RecieverID,
			&i.GroupID,
			&i.Sent,
			&i.Recieved,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Read,
			&i.IsSenderAllowedToSee,
			&i.IsReceiverAllowedToSee,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllMessages = `-- name: GetAllMessages :many
select id, description, sender_id, reciever_id, group_id, sent, recieved, created_at, updated_at, read, is_sender_allowed_to_see, is_receiver_allowed_to_see from messages where sender_id = $1 and reciever_id = $2 and created_at < $3 order by created_at limit 10
`

type GetAllMessagesParams struct {
	SenderID   uuid.UUID
	RecieverID uuid.NullUUID
	CreatedAt  time.Time
}

func (q *Queries) GetAllMessages(ctx context.Context, arg GetAllMessagesParams) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getAllMessages, arg.SenderID, arg.RecieverID, arg.CreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.SenderID,
			&i.RecieverID,
			&i.GroupID,
			&i.Sent,
			&i.Recieved,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Read,
			&i.IsSenderAllowedToSee,
			&i.IsReceiverAllowedToSee,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllOneToOneConversations = `-- name: GetAllOneToOneConversations :many
select distinct messages.reciever_id as reciever_id, users.username as username from messages join users on messages.reciever_id = users.id where messages.sender_id = $1
`

type GetAllOneToOneConversationsRow struct {
	RecieverID uuid.NullUUID
	Username   string
}

func (q *Queries) GetAllOneToOneConversations(ctx context.Context, senderID uuid.UUID) ([]GetAllOneToOneConversationsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllOneToOneConversations, senderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllOneToOneConversationsRow
	for rows.Next() {
		var i GetAllOneToOneConversationsRow
		if err := rows.Scan(&i.RecieverID, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestGroupMessagesByGroupID = `-- name: GetLatestGroupMessagesByGroupID :many
select groups.name as group_name, messages.description as messages, count(*) as total_new_messages
from messages join groups on messages.group_id = groups.id where messages.created_at > $1 group by group_name
order by messages.created_at
`

type GetLatestGroupMessagesByGroupIDRow struct {
	GroupName        string
	Messages         string
	TotalNewMessages int64
}

func (q *Queries) GetLatestGroupMessagesByGroupID(ctx context.Context, createdAt time.Time) ([]GetLatestGroupMessagesByGroupIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getLatestGroupMessagesByGroupID, createdAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLatestGroupMessagesByGroupIDRow
	for rows.Next() {
		var i GetLatestGroupMessagesByGroupIDRow
		if err := rows.Scan(&i.GroupName, &i.Messages, &i.TotalNewMessages); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestMessagesByRecieverID = `-- name: GetLatestMessagesByRecieverID :many
select users.username as sender, messages.description as messages, count(*) as total_new_messages
from messages join users on messages.sender_id = users.id where messages.reciever_id = $1 and
messages.created_at > $2 group by users.username order by messages.created_at
`

type GetLatestMessagesByRecieverIDParams struct {
	RecieverID uuid.NullUUID
	CreatedAt  time.Time
}

type GetLatestMessagesByRecieverIDRow struct {
	Sender           string
	Messages         string
	TotalNewMessages int64
}

func (q *Queries) GetLatestMessagesByRecieverID(ctx context.Context, arg GetLatestMessagesByRecieverIDParams) ([]GetLatestMessagesByRecieverIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getLatestMessagesByRecieverID, arg.RecieverID, arg.CreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLatestMessagesByRecieverIDRow
	for rows.Next() {
		var i GetLatestMessagesByRecieverIDRow
		if err := rows.Scan(&i.Sender, &i.Messages, &i.TotalNewMessages); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessageSenderReceiverAndGroupID = `-- name: GetMessageSenderReceiverAndGroupID :one
select sender_id, reciever_id, group_id from messages where id = $1
`

type GetMessageSenderReceiverAndGroupIDRow struct {
	SenderID   uuid.UUID
	RecieverID uuid.NullUUID
	GroupID    uuid.NullUUID
}

func (q *Queries) GetMessageSenderReceiverAndGroupID(ctx context.Context, id uuid.UUID) (GetMessageSenderReceiverAndGroupIDRow, error) {
	row := q.db.QueryRowContext(ctx, getMessageSenderReceiverAndGroupID, id)
	var i GetMessageSenderReceiverAndGroupIDRow
	err := row.Scan(&i.SenderID, &i.RecieverID, &i.GroupID)
	return i, err
}

const isGroupMemberAllowedToSeeMessage = `-- name: IsGroupMemberAllowedToSeeMessage :one
select is_allowed_to_see from group_message_receivers where message_id = $1 and group_id = $2 and member_id = $3
`

type IsGroupMemberAllowedToSeeMessageParams struct {
	MessageID uuid.UUID
	GroupID   uuid.UUID
	MemberID  uuid.UUID
}

func (q *Queries) IsGroupMemberAllowedToSeeMessage(ctx context.Context, arg IsGroupMemberAllowedToSeeMessageParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, isGroupMemberAllowedToSeeMessage, arg.MessageID, arg.GroupID, arg.MemberID)
	var is_allowed_to_see bool
	err := row.Scan(&is_allowed_to_see)
	return is_allowed_to_see, err
}

const markGroupMessageRead = `-- name: MarkGroupMessageRead :exec
insert into group_message_read(message_id, group_member_id, group_id, read_at)
values($1, $2, $3, NOW())
`

type MarkGroupMessageReadParams struct {
	MessageID     uuid.UUID
	GroupMemberID uuid.UUID
	GroupID       uuid.UUID
}

func (q *Queries) MarkGroupMessageRead(ctx context.Context, arg MarkGroupMessageReadParams) error {
	_, err := q.db.ExecContext(ctx, markGroupMessageRead, arg.MessageID, arg.GroupMemberID, arg.GroupID)
	return err
}

const markGroupMessageReceived = `-- name: MarkGroupMessageReceived :exec
insert into group_message_received(message_id, group_member_id, group_id, received_at)
values($1, $2, $3, NOW())
`

type MarkGroupMessageReceivedParams struct {
	MessageID     uuid.UUID
	GroupMemberID uuid.UUID
	GroupID       uuid.UUID
}

func (q *Queries) MarkGroupMessageReceived(ctx context.Context, arg MarkGroupMessageReceivedParams) error {
	_, err := q.db.ExecContext(ctx, markGroupMessageReceived, arg.MessageID, arg.GroupMemberID, arg.GroupID)
	return err
}

const markIsAllowedToSeeAsFalseForGroupMemeberReceivers = `-- name: MarkIsAllowedToSeeAsFalseForGroupMemeberReceivers :exec
update group_message_receivers set is_allowed_to_see = false where message_id = $1 and group_id = $2
`

type MarkIsAllowedToSeeAsFalseForGroupMemeberReceiversParams struct {
	MessageID uuid.UUID
	GroupID   uuid.UUID
}

func (q *Queries) MarkIsAllowedToSeeAsFalseForGroupMemeberReceivers(ctx context.Context, arg MarkIsAllowedToSeeAsFalseForGroupMemeberReceiversParams) error {
	_, err := q.db.ExecContext(ctx, markIsAllowedToSeeAsFalseForGroupMemeberReceivers, arg.MessageID, arg.GroupID)
	return err
}

const markIsAllowedToSeeAsFalseForSpecificGroupMemeber = `-- name: MarkIsAllowedToSeeAsFalseForSpecificGroupMemeber :exec
update group_message_receivers set is_allowed_to_see = false where message_id = $1 and group_id = $2 and member_id = $3
`

type MarkIsAllowedToSeeAsFalseForSpecificGroupMemeberParams struct {
	MessageID uuid.UUID
	GroupID   uuid.UUID
	MemberID  uuid.UUID
}

func (q *Queries) MarkIsAllowedToSeeAsFalseForSpecificGroupMemeber(ctx context.Context, arg MarkIsAllowedToSeeAsFalseForSpecificGroupMemeberParams) error {
	_, err := q.db.ExecContext(ctx, markIsAllowedToSeeAsFalseForSpecificGroupMemeber, arg.MessageID, arg.GroupID, arg.MemberID)
	return err
}

const markIsAllowedToSeeAsFalseForSpecificGroupMemeberWhoLeaves = `-- name: MarkIsAllowedToSeeAsFalseForSpecificGroupMemeberWhoLeaves :exec
update group_message_receivers set is_allowed_to_see = false where group_id = $1 and member_id = $2
`

type MarkIsAllowedToSeeAsFalseForSpecificGroupMemeberWhoLeavesParams struct {
	GroupID  uuid.UUID
	MemberID uuid.UUID
}

func (q *Queries) MarkIsAllowedToSeeAsFalseForSpecificGroupMemeberWhoLeaves(ctx context.Context, arg MarkIsAllowedToSeeAsFalseForSpecificGroupMemeberWhoLeavesParams) error {
	_, err := q.db.ExecContext(ctx, markIsAllowedToSeeAsFalseForSpecificGroupMemeberWhoLeaves, arg.GroupID, arg.MemberID)
	return err
}

const markIsAllowedToSeeAsTrueForSpecificGroupMember = `-- name: MarkIsAllowedToSeeAsTrueForSpecificGroupMember :exec
update group_message_receivers set is_allowed_to_see = true where group_id = $1 and member_id = $2
`

type MarkIsAllowedToSeeAsTrueForSpecificGroupMemberParams struct {
	GroupID  uuid.UUID
	MemberID uuid.UUID
}

func (q *Queries) MarkIsAllowedToSeeAsTrueForSpecificGroupMember(ctx context.Context, arg MarkIsAllowedToSeeAsTrueForSpecificGroupMemberParams) error {
	_, err := q.db.ExecContext(ctx, markIsAllowedToSeeAsTrueForSpecificGroupMember, arg.GroupID, arg.MemberID)
	return err
}

const markIsReceiverAllowedToSeeFalse = `-- name: MarkIsReceiverAllowedToSeeFalse :exec
update messages set is_receiver_allowed_to_see = false where sender_id = $1 and reciever_id = $2
`

type MarkIsReceiverAllowedToSeeFalseParams struct {
	SenderID   uuid.UUID
	RecieverID uuid.NullUUID
}

func (q *Queries) MarkIsReceiverAllowedToSeeFalse(ctx context.Context, arg MarkIsReceiverAllowedToSeeFalseParams) error {
	_, err := q.db.ExecContext(ctx, markIsReceiverAllowedToSeeFalse, arg.SenderID, arg.RecieverID)
	return err
}

const markIsSenderAllowedToSeeFalse = `-- name: MarkIsSenderAllowedToSeeFalse :exec
update messages set is_sender_allowed_to_see = false where sender_id = $1 and reciever_id = $2
`

type MarkIsSenderAllowedToSeeFalseParams struct {
	SenderID   uuid.UUID
	RecieverID uuid.NullUUID
}

func (q *Queries) MarkIsSenderAllowedToSeeFalse(ctx context.Context, arg MarkIsSenderAllowedToSeeFalseParams) error {
	_, err := q.db.ExecContext(ctx, markIsSenderAllowedToSeeFalse, arg.SenderID, arg.RecieverID)
	return err
}

const markMessageRead = `-- name: MarkMessageRead :one
update messages set read = true and updated_at = NOW() where id = $1
returning updated_at
`

func (q *Queries) MarkMessageRead(ctx context.Context, id uuid.UUID) (time.Time, error) {
	row := q.db.QueryRowContext(ctx, markMessageRead, id)
	var updated_at time.Time
	err := row.Scan(&updated_at)
	return updated_at, err
}

const markMessageReceived = `-- name: MarkMessageReceived :one
update messages set received = true and updated_at = NOW() where id = $1
returning updated_at
`

func (q *Queries) MarkMessageReceived(ctx context.Context, id uuid.UUID) (time.Time, error) {
	row := q.db.QueryRowContext(ctx, markMessageReceived, id)
	var updated_at time.Time
	err := row.Scan(&updated_at)
	return updated_at, err
}

const updateMessage = `-- name: UpdateMessage :one
update messages set description = $1, updated_at = NOW() where id = $2 and sender_id = $3 and group_id = $4
returning description, sender_id, reciever_id, group_id, sent, recieved, read, is_receiver_allowed_to_see, created_at, updated_at
`

type UpdateMessageParams struct {
	Description string
	ID          uuid.UUID
	SenderID    uuid.UUID
	GroupID     uuid.NullUUID
}

type UpdateMessageRow struct {
	Description            string
	SenderID               uuid.UUID
	RecieverID             uuid.NullUUID
	GroupID                uuid.NullUUID
	Sent                   bool
	Recieved               bool
	Read                   bool
	IsReceiverAllowedToSee bool
	CreatedAt              time.Time
	UpdatedAt              time.Time
}

func (q *Queries) UpdateMessage(ctx context.Context, arg UpdateMessageParams) (UpdateMessageRow, error) {
	row := q.db.QueryRowContext(ctx, updateMessage,
		arg.Description,
		arg.ID,
		arg.SenderID,
		arg.GroupID,
	)
	var i UpdateMessageRow
	err := row.Scan(
		&i.Description,
		&i.SenderID,
		&i.RecieverID,
		&i.GroupID,
		&i.Sent,
		&i.Recieved,
		&i.Read,
		&i.IsReceiverAllowedToSee,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
