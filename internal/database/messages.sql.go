// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: messages.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createMessage = `-- name: CreateMessage :one
insert into messages(
    id, description, sender_id, reciever_id,
    group_id, sent, recieved, created_at, updated_at
)
values(
    gen_random_uuid(),
    $1, $2, $3, $4, $5, $6, NOW(), NOW()
)
returning id, description, sender_id, reciever_id, group_id, sent, recieved, created_at, updated_at
`

type CreateMessageParams struct {
	Description string
	SenderID    uuid.UUID
	RecieverID  uuid.NullUUID
	GroupID     uuid.NullUUID
	Sent        bool
	Recieved    bool
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage,
		arg.Description,
		arg.SenderID,
		arg.RecieverID,
		arg.GroupID,
		arg.Sent,
		arg.Recieved,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.SenderID,
		&i.RecieverID,
		&i.GroupID,
		&i.Sent,
		&i.Recieved,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllGroupMessages = `-- name: GetAllGroupMessages :many
select id, description, sender_id, reciever_id, group_id, sent, recieved, created_at, updated_at from messages where group_id = $1
`

func (q *Queries) GetAllGroupMessages(ctx context.Context, groupID uuid.NullUUID) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getAllGroupMessages, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.SenderID,
			&i.RecieverID,
			&i.GroupID,
			&i.Sent,
			&i.Recieved,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllMessages = `-- name: GetAllMessages :many
select id, description, sender_id, reciever_id, group_id, sent, recieved, created_at, updated_at from messages where sender_id = $1 and reciever_id = $2
`

type GetAllMessagesParams struct {
	SenderID   uuid.UUID
	RecieverID uuid.NullUUID
}

func (q *Queries) GetAllMessages(ctx context.Context, arg GetAllMessagesParams) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getAllMessages, arg.SenderID, arg.RecieverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.SenderID,
			&i.RecieverID,
			&i.GroupID,
			&i.Sent,
			&i.Recieved,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeMessage = `-- name: RemoveMessage :exec
delete from messages where id = $1 and sender_id = $2 and reciever_id = $3 and group_id = $4
`

type RemoveMessageParams struct {
	ID         uuid.UUID
	SenderID   uuid.UUID
	RecieverID uuid.NullUUID
	GroupID    uuid.NullUUID
}

func (q *Queries) RemoveMessage(ctx context.Context, arg RemoveMessageParams) error {
	_, err := q.db.ExecContext(ctx, removeMessage,
		arg.ID,
		arg.SenderID,
		arg.RecieverID,
		arg.GroupID,
	)
	return err
}

const updateMessage = `-- name: UpdateMessage :one
update messages set description = $1 where id = $2 and sender_id = $3 and group_id = $4
returning description, sender_id, reciever_id, group_id sent, recieved, created_at, updated_at
`

type UpdateMessageParams struct {
	Description string
	ID          uuid.UUID
	SenderID    uuid.UUID
	GroupID     uuid.NullUUID
}

type UpdateMessageRow struct {
	Description string
	SenderID    uuid.UUID
	RecieverID  uuid.NullUUID
	Sent        uuid.NullUUID
	Recieved    bool
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) UpdateMessage(ctx context.Context, arg UpdateMessageParams) (UpdateMessageRow, error) {
	row := q.db.QueryRowContext(ctx, updateMessage,
		arg.Description,
		arg.ID,
		arg.SenderID,
		arg.GroupID,
	)
	var i UpdateMessageRow
	err := row.Scan(
		&i.Description,
		&i.SenderID,
		&i.RecieverID,
		&i.Sent,
		&i.Recieved,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateMessageRecieved = `-- name: UpdateMessageRecieved :exec
update messages set recieved = true where id = $1
`

func (q *Queries) UpdateMessageRecieved(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, updateMessageRecieved, id)
	return err
}
