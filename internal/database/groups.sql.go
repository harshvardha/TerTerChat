// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: groups.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addUserToGroup = `-- name: AddUserToGroup :exec
insert into users_groups(user_id, group_id, created_at)
values($1, $2, NOW())
`

type AddUserToGroupParams struct {
	UserID  uuid.UUID
	GroupID uuid.UUID
}

func (q *Queries) AddUserToGroup(ctx context.Context, arg AddUserToGroupParams) error {
	_, err := q.db.ExecContext(ctx, addUserToGroup, arg.UserID, arg.GroupID)
	return err
}

const createGroup = `-- name: CreateGroup :one
insert into groups(id, name, created_at, updated_at)
values(gen_random_uuid(), $1, NOW(), NOW())
returning id, name, created_at, updated_at
`

func (q *Queries) CreateGroup(ctx context.Context, name string) (Group, error) {
	row := q.db.QueryRowContext(ctx, createGroup, name)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteGroup = `-- name: DeleteGroup :exec
delete from groups where id = $1
`

func (q *Queries) DeleteGroup(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteGroup, id)
	return err
}

const getGroupAdmins = `-- name: GetGroupAdmins :many
select groups.name, users.username from groups join group_admins on groups.id = group_admins.group_id join users on users.id = group_admins.user_id where groups.id = $1
`

type GetGroupAdminsRow struct {
	Name     string
	Username string
}

func (q *Queries) GetGroupAdmins(ctx context.Context, id uuid.UUID) ([]GetGroupAdminsRow, error) {
	rows, err := q.db.QueryContext(ctx, getGroupAdmins, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGroupAdminsRow
	for rows.Next() {
		var i GetGroupAdminsRow
		if err := rows.Scan(&i.Name, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupMembers = `-- name: GetGroupMembers :many
select groups.name, users.username from groups join users_groups on groups.id = users_groups.group_id join users on users.id = users_groups.user_id where groups.id = $1
`

type GetGroupMembersRow struct {
	Name     string
	Username string
}

func (q *Queries) GetGroupMembers(ctx context.Context, id uuid.UUID) ([]GetGroupMembersRow, error) {
	rows, err := q.db.QueryContext(ctx, getGroupMembers, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGroupMembersRow
	for rows.Next() {
		var i GetGroupMembersRow
		if err := rows.Scan(&i.Name, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupMembersPhonenumbers = `-- name: GetGroupMembersPhonenumbers :many
select users.phonenumber from users_groups join users on users_groups.user_id = users.id where users_groups.group_id = $1
`

func (q *Queries) GetGroupMembersPhonenumbers(ctx context.Context, groupID uuid.UUID) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getGroupMembersPhonenumbers, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var phonenumber string
		if err := rows.Scan(&phonenumber); err != nil {
			return nil, err
		}
		items = append(items, phonenumber)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const groupMembersCount = `-- name: GroupMembersCount :one
select count(*) from users_groups where group_id = $1
`

func (q *Queries) GroupMembersCount(ctx context.Context, groupID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, groupMembersCount, groupID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const isUserAdmin = `-- name: IsUserAdmin :one
select 1 from group_admins where user_id = $1 and group_id = $2
`

type IsUserAdminParams struct {
	UserID  uuid.UUID
	GroupID uuid.UUID
}

func (q *Queries) IsUserAdmin(ctx context.Context, arg IsUserAdminParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, isUserAdmin, arg.UserID, arg.GroupID)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const makeUserAdmin = `-- name: MakeUserAdmin :exec
insert into group_admins(user_id, group_id, created_at)
values($1, $2, NOW())
`

type MakeUserAdminParams struct {
	UserID  uuid.UUID
	GroupID uuid.UUID
}

func (q *Queries) MakeUserAdmin(ctx context.Context, arg MakeUserAdminParams) error {
	_, err := q.db.ExecContext(ctx, makeUserAdmin, arg.UserID, arg.GroupID)
	return err
}

const removeUserFromAdmin = `-- name: RemoveUserFromAdmin :exec
delete from group_admins where user_id = $1 and group_id = $2
`

type RemoveUserFromAdminParams struct {
	UserID  uuid.UUID
	GroupID uuid.UUID
}

func (q *Queries) RemoveUserFromAdmin(ctx context.Context, arg RemoveUserFromAdminParams) error {
	_, err := q.db.ExecContext(ctx, removeUserFromAdmin, arg.UserID, arg.GroupID)
	return err
}

const removeUserFromGroup = `-- name: RemoveUserFromGroup :exec
delete from users_groups where user_id = $1 and group_id = $2
`

type RemoveUserFromGroupParams struct {
	UserID  uuid.UUID
	GroupID uuid.UUID
}

func (q *Queries) RemoveUserFromGroup(ctx context.Context, arg RemoveUserFromGroupParams) error {
	_, err := q.db.ExecContext(ctx, removeUserFromGroup, arg.UserID, arg.GroupID)
	return err
}

const updateGroup = `-- name: UpdateGroup :one
update groups set name = $1 where id = $2
returning name, updated_at
`

type UpdateGroupParams struct {
	Name string
	ID   uuid.UUID
}

type UpdateGroupRow struct {
	Name      string
	UpdatedAt time.Time
}

func (q *Queries) UpdateGroup(ctx context.Context, arg UpdateGroupParams) (UpdateGroupRow, error) {
	row := q.db.QueryRowContext(ctx, updateGroup, arg.Name, arg.ID)
	var i UpdateGroupRow
	err := row.Scan(&i.Name, &i.UpdatedAt)
	return i, err
}
